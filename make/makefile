# REBOL Makefile -- Generated by make-core.r (do not edit) on 31-Jul-2011/22:30:20-7:00
# This makefile is intentional kept simple to make builds possible on
# a wider range of target platforms.

# To cross compile or build for other target:
#    $TOOLS - should point to bin where gcc is found
#    $INCL  - should point to the dir for includes
# Example make:
#    make TOOLS=~/amiga/amiga/bin/ppc-amigaos- INCL=/SDK/newlib/include

# For the build toolchain:
CC=	$(TOOLS)gcc
NM=	$(TOOLS)nm
STRIP=	$(TOOLS)strip

# CP allows different copy progs:
CP=	 cp
# UP - some systems do not use ../
UP=	 ..
# CD - some systems do not use ./
CD=	 ./
# Special tools:
T=	$(UP)/src/tools
# Paths used by make:
S=	../src
R=	$S/core

INCL ?= .
I= -I$(INCL) -I$S/include/

TO_OS=	 TO_LINUX
OS_ID=	 0.4.4
RAPI_FLAGS=	  -O2 -fvisibility=hidden
HOST_FLAGS=	  -O2 -fvisibility=hidden -D_FILE_OFFSET_BITS=64
RLIB_FLAGS=	

# Flags for core and for host:
RFLAGS= -c -D$(TO_OS) -DREB_API  $(RAPI_FLAGS) $I
HFLAGS= -c -D$(TO_OS) -DREB_CORE $(HOST_FLAGS) $I
CLIB=   -lc -lm  -ldl

# REBOL builds various include files:
REBOL=	$(CD)r3-make -qs

# For running tests, ship, build, etc.
R3=	$(CD)r3 -qs

### Build targets:
top:
	make r3

update:
	-cd $(UP)/; cvs -q update src

make:
	$(REBOL) $T/make-make.r $(OS_ID)

clean:
	@-rm obj/* libr3.so

all:
	make clean
	make prep
	make r3
	make lib
	make host

prep:
	$(REBOL) $T/make-headers.r
	$(REBOL) $T/make-boot.r $(OS_ID)
	$(REBOL) $T/make-host-init.r
	$(REBOL) $T/make-os-ext.r # ok, but not always
	$(REBOL) $T/make-host-ext.r
	$(REBOL) $T/make-reb-lib.r

### Post build actions
purge:
	-rm libr3.*
	-rm host
	make lib
	make host

test:
	$(CP) r3 $(UP)/src/tests/
	$(R3) $S/tests/test.r

install:
	sudo cp r3 /usr/local/bin

ship:
	$(R3) $S/tools/upload.r

build:	libr3.so
	$(R3) $S/tools/make-build.r

cln:
	rm libr3.* r3.o

check:
	$(STRIP) -s -o r3.s r3
	$(STRIP) -x -o r3.x r3
	$(STRIP) -X -o r3.X r3
	ls -l r3*

obj =	obj/a-constants.o obj/a-globals.o obj/a-lib.o obj/b-boot.o \
	obj/b-init.o obj/c-do.o obj/c-error.o obj/c-frame.o \
	obj/c-function.o obj/c-port.o obj/c-task.o obj/c-word.o \
	obj/d-crash.o obj/d-dump.o obj/d-print.o obj/f-blocks.o \
	obj/f-deci.o obj/f-enbase.o obj/f-extension.o obj/f-math.o \
	obj/f-modify.o obj/f-random.o obj/f-round.o obj/f-series.o \
	obj/f-stubs.o obj/l-scan.o obj/l-types.o obj/m-gc.o \
	obj/m-pools.o obj/m-series.o obj/n-control.o obj/n-data.o \
	obj/n-io.o obj/n-loop.o obj/n-math.o obj/n-sets.o \
	obj/n-strings.o obj/n-system.o obj/p-clipboard.o obj/p-console.o \
	obj/p-dir.o obj/p-dns.o obj/p-event.o obj/p-file.o \
	obj/p-net.o obj/s-cases.o obj/s-crc.o obj/s-file.o \
	obj/s-find.o obj/s-make.o obj/s-mold.o obj/s-ops.o \
	obj/s-trim.o obj/s-unicode.o obj/t-bitset.o obj/t-block.o \
	obj/t-char.o obj/t-datatype.o obj/t-date.o obj/t-decimal.o \
	obj/t-event.o obj/t-function.o obj/t-gob.o obj/t-image.o \
	obj/t-integer.o obj/t-logic.o obj/t-map.o obj/t-money.o \
	obj/t-none.o obj/t-object.o obj/t-pair.o obj/t-port.o \
	obj/t-string.o obj/t-time.o obj/t-tuple.o obj/t-typeset.o \
	obj/t-utype.o obj/t-vector.o obj/t-word.o obj/u-bmp.o \
	obj/u-compress.o obj/u-dialect.o obj/u-gif.o obj/u-jpg.o \
	obj/u-md5.o obj/u-parse.o obj/u-png.o obj/u-sha1.o \
	obj/u-zlib.o 

HOST =	obj/host-main.o obj/host-args.o obj/host-device.o obj/host-stdio.o \
	obj/dev-net.o obj/dev-dns.o obj/host-lib.o obj/host-readline.o \
	obj/dev-stdio.o obj/dev-event.o obj/dev-file.o 


# Directly linked r3 executable:
r3:	$(obj) $(HOST)
	$(CC) -o r3 $(obj) $(HOST) $(CLIB)
	$(STRIP) r3
	-$(NM) -a r3
	ls -l r3

lib:	libr3.so

# PUBLIC: Shared library:
# NOTE: Did not use "-Wl,-soname,libr3.so" because won't find .so in local dir.
libr3.so:	$(obj)
	$(CC) -o libr3.so -shared $(obj) $(CLIB)
	$(STRIP) libr3.so
	-$(NM) -D libr3.so
	-$(NM) -a libr3.so | grep "Do_"
	ls -l libr3.so

# PUBLIC: Host using the shared lib:
host:	$(HOST)
	$(CC) -o host $(HOST) libr3.so $(CLIB)
	$(STRIP) libr3.lib
	$(STRIP) host
	ls -l host
	echo "export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH"

### File build targets:
b-boot.c: $(SRC)/boot/boot.r
	$(REBOL) -sqw $(SRC)/tools/make-boot.r

obj/a-constants.o:   $R/a-constants.c
	$(CC) $R/a-constants.c $(RFLAGS) -o obj/a-constants.o

obj/a-globals.o:     $R/a-globals.c
	$(CC) $R/a-globals.c $(RFLAGS) -o obj/a-globals.o

obj/a-lib.o:         $R/a-lib.c
	$(CC) $R/a-lib.c $(RFLAGS) -o obj/a-lib.o

obj/b-boot.o:        $R/b-boot.c
	$(CC) $R/b-boot.c $(RFLAGS) -o obj/b-boot.o

obj/b-init.o:        $R/b-init.c
	$(CC) $R/b-init.c $(RFLAGS) -o obj/b-init.o

obj/c-do.o:          $R/c-do.c
	$(CC) $R/c-do.c $(RFLAGS) -o obj/c-do.o

obj/c-error.o:       $R/c-error.c
	$(CC) $R/c-error.c $(RFLAGS) -o obj/c-error.o

obj/c-frame.o:       $R/c-frame.c
	$(CC) $R/c-frame.c $(RFLAGS) -o obj/c-frame.o

obj/c-function.o:    $R/c-function.c
	$(CC) $R/c-function.c $(RFLAGS) -o obj/c-function.o

obj/c-port.o:        $R/c-port.c
	$(CC) $R/c-port.c $(RFLAGS) -o obj/c-port.o

obj/c-task.o:        $R/c-task.c
	$(CC) $R/c-task.c $(RFLAGS) -o obj/c-task.o

obj/c-word.o:        $R/c-word.c
	$(CC) $R/c-word.c $(RFLAGS) -o obj/c-word.o

obj/d-crash.o:       $R/d-crash.c
	$(CC) $R/d-crash.c $(RFLAGS) -o obj/d-crash.o

obj/d-dump.o:        $R/d-dump.c
	$(CC) $R/d-dump.c $(RFLAGS) -o obj/d-dump.o

obj/d-print.o:       $R/d-print.c
	$(CC) $R/d-print.c $(RFLAGS) -o obj/d-print.o

obj/f-blocks.o:      $R/f-blocks.c
	$(CC) $R/f-blocks.c $(RFLAGS) -o obj/f-blocks.o

obj/f-deci.o:        $R/f-deci.c
	$(CC) $R/f-deci.c $(RFLAGS) -o obj/f-deci.o

obj/f-enbase.o:      $R/f-enbase.c
	$(CC) $R/f-enbase.c $(RFLAGS) -o obj/f-enbase.o

obj/f-extension.o:   $R/f-extension.c
	$(CC) $R/f-extension.c $(RFLAGS) -o obj/f-extension.o

obj/f-math.o:        $R/f-math.c
	$(CC) $R/f-math.c $(RFLAGS) -o obj/f-math.o

obj/f-modify.o:      $R/f-modify.c
	$(CC) $R/f-modify.c $(RFLAGS) -o obj/f-modify.o

obj/f-random.o:      $R/f-random.c
	$(CC) $R/f-random.c $(RFLAGS) -o obj/f-random.o

obj/f-round.o:       $R/f-round.c
	$(CC) $R/f-round.c $(RFLAGS) -o obj/f-round.o

obj/f-series.o:      $R/f-series.c
	$(CC) $R/f-series.c $(RFLAGS) -o obj/f-series.o

obj/f-stubs.o:       $R/f-stubs.c
	$(CC) $R/f-stubs.c $(RFLAGS) -o obj/f-stubs.o

obj/l-scan.o:        $R/l-scan.c
	$(CC) $R/l-scan.c $(RFLAGS) -o obj/l-scan.o

obj/l-types.o:       $R/l-types.c
	$(CC) $R/l-types.c $(RFLAGS) -o obj/l-types.o

obj/m-gc.o:          $R/m-gc.c
	$(CC) $R/m-gc.c $(RFLAGS) -o obj/m-gc.o

obj/m-pools.o:       $R/m-pools.c
	$(CC) $R/m-pools.c $(RFLAGS) -o obj/m-pools.o

obj/m-series.o:      $R/m-series.c
	$(CC) $R/m-series.c $(RFLAGS) -o obj/m-series.o

obj/n-control.o:     $R/n-control.c
	$(CC) $R/n-control.c $(RFLAGS) -o obj/n-control.o

obj/n-data.o:        $R/n-data.c
	$(CC) $R/n-data.c $(RFLAGS) -o obj/n-data.o

obj/n-io.o:          $R/n-io.c
	$(CC) $R/n-io.c $(RFLAGS) -o obj/n-io.o

obj/n-loop.o:        $R/n-loop.c
	$(CC) $R/n-loop.c $(RFLAGS) -o obj/n-loop.o

obj/n-math.o:        $R/n-math.c
	$(CC) $R/n-math.c $(RFLAGS) -o obj/n-math.o

obj/n-sets.o:        $R/n-sets.c
	$(CC) $R/n-sets.c $(RFLAGS) -o obj/n-sets.o

obj/n-strings.o:     $R/n-strings.c
	$(CC) $R/n-strings.c $(RFLAGS) -o obj/n-strings.o

obj/n-system.o:      $R/n-system.c
	$(CC) $R/n-system.c $(RFLAGS) -o obj/n-system.o

obj/p-clipboard.o:   $R/p-clipboard.c
	$(CC) $R/p-clipboard.c $(RFLAGS) -o obj/p-clipboard.o

obj/p-console.o:     $R/p-console.c
	$(CC) $R/p-console.c $(RFLAGS) -o obj/p-console.o

obj/p-dir.o:         $R/p-dir.c
	$(CC) $R/p-dir.c $(RFLAGS) -o obj/p-dir.o

obj/p-dns.o:         $R/p-dns.c
	$(CC) $R/p-dns.c $(RFLAGS) -o obj/p-dns.o

obj/p-event.o:       $R/p-event.c
	$(CC) $R/p-event.c $(RFLAGS) -o obj/p-event.o

obj/p-file.o:        $R/p-file.c
	$(CC) $R/p-file.c $(RFLAGS) -o obj/p-file.o

obj/p-net.o:         $R/p-net.c
	$(CC) $R/p-net.c $(RFLAGS) -o obj/p-net.o

obj/s-cases.o:       $R/s-cases.c
	$(CC) $R/s-cases.c $(RFLAGS) -o obj/s-cases.o

obj/s-crc.o:         $R/s-crc.c
	$(CC) $R/s-crc.c $(RFLAGS) -o obj/s-crc.o

obj/s-file.o:        $R/s-file.c
	$(CC) $R/s-file.c $(RFLAGS) -o obj/s-file.o

obj/s-find.o:        $R/s-find.c
	$(CC) $R/s-find.c $(RFLAGS) -o obj/s-find.o

obj/s-make.o:        $R/s-make.c
	$(CC) $R/s-make.c $(RFLAGS) -o obj/s-make.o

obj/s-mold.o:        $R/s-mold.c
	$(CC) $R/s-mold.c $(RFLAGS) -o obj/s-mold.o

obj/s-ops.o:         $R/s-ops.c
	$(CC) $R/s-ops.c $(RFLAGS) -o obj/s-ops.o

obj/s-trim.o:        $R/s-trim.c
	$(CC) $R/s-trim.c $(RFLAGS) -o obj/s-trim.o

obj/s-unicode.o:     $R/s-unicode.c
	$(CC) $R/s-unicode.c $(RFLAGS) -o obj/s-unicode.o

obj/t-bitset.o:      $R/t-bitset.c
	$(CC) $R/t-bitset.c $(RFLAGS) -o obj/t-bitset.o

obj/t-block.o:       $R/t-block.c
	$(CC) $R/t-block.c $(RFLAGS) -o obj/t-block.o

obj/t-char.o:        $R/t-char.c
	$(CC) $R/t-char.c $(RFLAGS) -o obj/t-char.o

obj/t-datatype.o:    $R/t-datatype.c
	$(CC) $R/t-datatype.c $(RFLAGS) -o obj/t-datatype.o

obj/t-date.o:        $R/t-date.c
	$(CC) $R/t-date.c $(RFLAGS) -o obj/t-date.o

obj/t-decimal.o:     $R/t-decimal.c
	$(CC) $R/t-decimal.c $(RFLAGS) -o obj/t-decimal.o

obj/t-event.o:       $R/t-event.c
	$(CC) $R/t-event.c $(RFLAGS) -o obj/t-event.o

obj/t-function.o:    $R/t-function.c
	$(CC) $R/t-function.c $(RFLAGS) -o obj/t-function.o

obj/t-gob.o:         $R/t-gob.c
	$(CC) $R/t-gob.c $(RFLAGS) -o obj/t-gob.o

obj/t-image.o:       $R/t-image.c
	$(CC) $R/t-image.c $(RFLAGS) -o obj/t-image.o

obj/t-integer.o:     $R/t-integer.c
	$(CC) $R/t-integer.c $(RFLAGS) -o obj/t-integer.o

obj/t-logic.o:       $R/t-logic.c
	$(CC) $R/t-logic.c $(RFLAGS) -o obj/t-logic.o

obj/t-map.o:         $R/t-map.c
	$(CC) $R/t-map.c $(RFLAGS) -o obj/t-map.o

obj/t-money.o:       $R/t-money.c
	$(CC) $R/t-money.c $(RFLAGS) -o obj/t-money.o

obj/t-none.o:        $R/t-none.c
	$(CC) $R/t-none.c $(RFLAGS) -o obj/t-none.o

obj/t-object.o:      $R/t-object.c
	$(CC) $R/t-object.c $(RFLAGS) -o obj/t-object.o

obj/t-pair.o:        $R/t-pair.c
	$(CC) $R/t-pair.c $(RFLAGS) -o obj/t-pair.o

obj/t-port.o:        $R/t-port.c
	$(CC) $R/t-port.c $(RFLAGS) -o obj/t-port.o

obj/t-string.o:      $R/t-string.c
	$(CC) $R/t-string.c $(RFLAGS) -o obj/t-string.o

obj/t-time.o:        $R/t-time.c
	$(CC) $R/t-time.c $(RFLAGS) -o obj/t-time.o

obj/t-tuple.o:       $R/t-tuple.c
	$(CC) $R/t-tuple.c $(RFLAGS) -o obj/t-tuple.o

obj/t-typeset.o:     $R/t-typeset.c
	$(CC) $R/t-typeset.c $(RFLAGS) -o obj/t-typeset.o

obj/t-utype.o:       $R/t-utype.c
	$(CC) $R/t-utype.c $(RFLAGS) -o obj/t-utype.o

obj/t-vector.o:      $R/t-vector.c
	$(CC) $R/t-vector.c $(RFLAGS) -o obj/t-vector.o

obj/t-word.o:        $R/t-word.c
	$(CC) $R/t-word.c $(RFLAGS) -o obj/t-word.o

obj/u-bmp.o:         $R/u-bmp.c
	$(CC) $R/u-bmp.c $(RFLAGS) -o obj/u-bmp.o

obj/u-compress.o:    $R/u-compress.c
	$(CC) $R/u-compress.c $(RFLAGS) -o obj/u-compress.o

obj/u-dialect.o:     $R/u-dialect.c
	$(CC) $R/u-dialect.c $(RFLAGS) -o obj/u-dialect.o

obj/u-gif.o:         $R/u-gif.c
	$(CC) $R/u-gif.c $(RFLAGS) -o obj/u-gif.o

obj/u-jpg.o:         $R/u-jpg.c
	$(CC) $R/u-jpg.c $(RFLAGS) -o obj/u-jpg.o

obj/u-md5.o:         $R/u-md5.c
	$(CC) $R/u-md5.c $(RFLAGS) -o obj/u-md5.o

obj/u-parse.o:       $R/u-parse.c
	$(CC) $R/u-parse.c $(RFLAGS) -o obj/u-parse.o

obj/u-png.o:         $R/u-png.c
	$(CC) $R/u-png.c $(RFLAGS) -o obj/u-png.o

obj/u-sha1.o:        $R/u-sha1.c
	$(CC) $R/u-sha1.c $(RFLAGS) -o obj/u-sha1.o

obj/u-zlib.o:        $R/u-zlib.c
	$(CC) $R/u-zlib.c $(RFLAGS) -o obj/u-zlib.o

obj/host-main.o:     $S/os/host-main.c
	$(CC) $S/os/host-main.c $(HFLAGS) -o obj/host-main.o

obj/host-args.o:     $S/os/host-args.c
	$(CC) $S/os/host-args.c $(HFLAGS) -o obj/host-args.o

obj/host-device.o:   $S/os/host-device.c
	$(CC) $S/os/host-device.c $(HFLAGS) -o obj/host-device.o

obj/host-stdio.o:    $S/os/host-stdio.c
	$(CC) $S/os/host-stdio.c $(HFLAGS) -o obj/host-stdio.o

obj/dev-net.o:       $S/os/dev-net.c
	$(CC) $S/os/dev-net.c $(HFLAGS) -o obj/dev-net.o

obj/dev-dns.o:       $S/os/dev-dns.c
	$(CC) $S/os/dev-dns.c $(HFLAGS) -o obj/dev-dns.o

obj/host-lib.o:      $S/os/posix/host-lib.c
	$(CC) $S/os/posix/host-lib.c $(HFLAGS) -o obj/host-lib.o

obj/host-readline.o: $S/os/posix/host-readline.c
	$(CC) $S/os/posix/host-readline.c $(HFLAGS) -o obj/host-readline.o

obj/dev-stdio.o:     $S/os/posix/dev-stdio.c
	$(CC) $S/os/posix/dev-stdio.c $(HFLAGS) -o obj/dev-stdio.o

obj/dev-event.o:     $S/os/posix/dev-event.c
	$(CC) $S/os/posix/dev-event.c $(HFLAGS) -o obj/dev-event.o

obj/dev-file.o:      $S/os/posix/dev-file.c
	$(CC) $S/os/posix/dev-file.c $(HFLAGS) -o obj/dev-file.o

